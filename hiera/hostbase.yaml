---
classes:
  - apt
  - cron
  - hostbase::autoupdate
  - hostbase::dotfiles
  - hostbase::packages
  - hostbase::puppet
  - hostbase::puppet_cron
  - hostbase::resolved
  - hostbase::sshd
  - hostbase::syslog
  - timezone
  - docker
  - docker::run_instance

hostbase::puppet::version: 8.8.1-1

hostbase::packages::present:
  - btop
  - mailutils
  - neovim
  - git
  - python3-virtualenv
  - python3-pip
  - hwinfo
  - fzf
  - mbuffer

hostbase::packages::absent: []

timezone::timezone: Etc/UTC

dns::servers:
  - 10.1.1.53

apt::sources:

dotfiles:
  "marco": {}
  "root": {}

ressources:
  group:
    "ubuntu":
      ensure: absent
      before: Group[marco]
      require: User[ubuntu]
    "marco":
      ensure: present
      gid: 1000
      before: User[marco]
  user:
    "ubuntu":
      ensure: absent
      before: User[marco]
    "marco":
      ensure: present
      uid: 1000
      gid: marco
      home: /home/marco
      shell: /bin/bash
      managehome: true
      password: "%{lookup('secret_marco')}"
      groups:
        - sudo
        - adm
      purge_ssh_keys: true
  file_line:
    "/etc/locale.gen":
      path: /etc/locale.gen
      line: "en_GB.UTF-8 UTF-8"
      notify: Exec[/usr/sbin/locale-gen]
  file:
    "/etc/default/locale":
      content: "LANG=en_GB.UTF-8"
      notify: Exec[/usr/sbin/locale-gen]
    "/var/lib/puppet/reports":
      ensure: absent
      force: true
    "/etc/userkeys":
      ensure: directory
    "/etc/userkeys/root":
      ensure: directory
      require: File[/etc/userkeys]
    "/etc/userkeys/marco":
      ensure: directory
      require: File[/etc/userkeys]
    /etc/userkeys/marco/authorized_keys:
      ensure: present
      mode: "0644"
      content: |
        ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIESaPVR26gxGnwaomoRcdipNTNC7jxn7TO7Pb+FmECnL marco@gentoobox.clients.gentoomaniac.net
        ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAxSYdM4DORK2/koKHlz9nWuDclxIKIhlXoQTKdEnz67 marco@marcos-desktop
        ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBCR9BEezV3MH1y/9YEzvaQ9PXn9KsJ0ZVyzZtUHSMTJ marco@marco-mbrk-ubuntu

      require: File[/etc/userkeys/marco]
    /etc/userkeys/root/authorized_keys:
      ensure: present
      mode: "0644"
      content: |
        ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC5d/oJWpUQaelmkllEMO6nwy4TYWFSoGtkuVPTq4wavpHwp7/uqRHIzQ8/DnjEkuFzyNImrCLpgOPnNstWmTmyMHRfHDy+wiwvlO1ceVixL5Uj8qYewvEXP7alG9lueVS/PovidhzVoh7p7VDXrZynU7lJaGQ2cfMXXJXwcjXIOkD3X0z3//j6yu7Rw/65ZuexSGtCRgrXDDCzEK+Kp4b/MLavY5N2ukEl654VUZEYvagQXSFsNsFEq6tu+4ywOnAZhtV1Ob/oCfspr8ejaFyxHpmnjiE5Ln72/rMEM+IrI6ifjn8zY9sqku20olc17Cr4cgGhvR5J8Ws8xu1GlG79 root@freenas.gentoomaniac.net
      require: File[/etc/userkeys/root]
    "/etc/netplan/00-installer-config.yaml":
      ensure: absent
    "/etc/netplan/99-installer-config.yaml":
      ensure: absent
    "/srv":
      ensure: directory
    "/usr/local/bin/mvault":
      ensure: present
      mode: "0754"
      content: |
        #!/usr/bin/env bash

        VAULT_BIN=$(which vault)
        export VAULT_ADDR=https://vault.srv.gentoomaniac.net/

        # renew vault token:
        if [ -n "${VAULT_BIN}" ]; then
            VAULT_TOKEN=$(vault write -field=token auth/approle/login role_id="$(cat /etc/vault_role_id)" secret_id="$(cat /etc/vault_secret_id)")
            export VAULT_TOKEN
        else
            echo "Vault binary not found"
            exit 1
        fi

        ${VAULT_BIN} "$@"
    "/usr/local/bin/custom-metrics":
        ensure: present
        mode: "0755"
        content: |
          #!/usr/bin/env bash

          set -o pipefail

          EPOCHTIME=$(date +%s)

          OS_NAME="$(lsb_release -d | sed "s/^Description:\s\+\(.*\)/\1/")"
          PENDING_UPDATES="$(apt-get -s dist-upgrade | grep "^Inst" | wc -l)"
          PENDING_SEC_UPDATES="$(apt-get -s dist-upgrade | grep "^Inst" | grep -i security | wc -l)"
          REBOOT_REQUIRED_SINCE="$(( ${EPOCHTIME} - $(ls -l --time-style='+%s' /var/run/reboot-required 2>/dev/null | awk '{if ($6) print $6;}' || echo "${EPOCHTIME}") ))"

          echo "lsb_release value=1,release=\"${OS_NAME}\""
          echo "pending_updates,type=patch value=$((PENDING_UPDATES-PENDING_SEC_UPDATES))"
          echo "pending_updates,type=security value=${PENDING_SEC_UPDATES}"
          echo "reboot_required_since value=${REBOOT_REQUIRED_SINCE:-0}"
          echo "puppet_branch value=1,branch=\"$(head -1 /etc/puppet_branch)\""

    "/etc/cron.weekly/regular-reboot":
      ensure: absent
    "/usr/local/bin/unattended-reboot":
      ensure: present
      mode: "0754"
      content: |
        #!/usr/bin/env bash
        if [ ! -f /etc/no_reboot ]; then
          sleep $((RANDOM%60*60))
          reboot
        fi
    "/etc/systemd/system/unattended-reboot-weekly.timer":
      content: |
        [Unit]
        Description=Run unattended-reboot weekly

        [Timer]
        OnCalendar=weekly
        Persistent=true
        Unit=unattended-reboot.service

        [Install]
        WantedBy=timers.target
      require:
        - File[/etc/systemd/system/unattended-reboot.service]
    "/etc/systemd/system/unattended-reboot.service":
      ensure: present
      mode: "0644"
      content: |
        [Unit]
        Description=reboot system after a random delay

        [Service]
        Type=oneshot
        ExecStart=/usr/local/bin/unattended-reboot
        User=root
        Group=systemd-journal
      require:
        - File[/usr/local/bin/unattended-reboot]

    "/etc/cron.weekly/docker-system-prune":
      ensure: absent
    "/usr/local/bin/docker-system-prune":
      ensure: present
      mode: "0750"
      content: |
        #!/usr/bin/env bash
        if [ ! -f /etc/no_prune ]; then
          sleep $((RANDOM%60*60))
          yes | docker system prune --volumes
        fi
    "/etc/systemd/system/docker-system-prune-weekly.timer":
      content: |
        [Unit]
        Description=Run docker-system-prune weekly

        [Timer]
        OnCalendar=weekly
        Persistent=true
        Unit=docker-system-prune.service

        [Install]
        WantedBy=timers.target
      require:
        - File[/etc/systemd/system/docker-system-prune.service]
    "/etc/systemd/system/docker-system-prune.service":
      ensure: present
      mode: "0644"
      content: |
        [Unit]
        Description=docker system prune after a random delay

        [Service]
        Type=oneshot
        ExecStart=/usr/local/bin/docker-system-prune
        User=root
        Group=systemd-journal
      require:
        - File[/usr/local/bin/docker-system-prune]

    "/usr/local/bin/zfs-create-snapshots":
      ensure: present
      mode: "0754"
      content: |
        #!/bin/env bash

        LABEL=${1:-frequent}

        POOL_NAME="$(zpool list| awk '/ONLINE/{print $1}')"
        DATASETS="$(zfs list | awk "/${POOL_NAME}\//{print \$1}")"

        for dataset in ${DATASETS}; do
            zfs snapshot "${dataset}@${LABEL}-$(date +%Y%m%d-%H%M%S)"
        done
    "/etc/systemd/system/zfs-snapshots@.service":
      ensure: present
      content: |
        [Unit]
        Description=Create zfs %i snapshots

        [Service]
        Type=oneshot
        ExecStart=/usr/local/bin/zfs-create-snapshots %i
        User=root
        Group=systemd-journal
      require: File[/usr/local/bin/zfs-create-snapshots]
    "/etc/systemd/system/zfs-snapshots-daily.timer":
      ensure: present
      content: |
        [Unit]
        Description=Timer for daily zfs snapshots

        [Timer]
        OnCalendar=daily
        Persistent=true
        Unit=zfs-snapshots@daily.service

        [Install]
        WantedBy=timers.target
      require: File[/etc/systemd/system/zfs-snapshots@.service]
    "/etc/systemd/system/zfs-snapshots-weekly.timer":
      ensure: present
      content: |
        [Unit]
        Description=Timer for weekly zfs snapshots

        [Timer]
        OnCalendar=weekly
        Persistent=true
        Unit=zfs-snapshots@weekly.service

        [Install]
        WantedBy=timers.target
      require: File[/etc/systemd/system/zfs-snapshots@.service]
    "/usr/local/bin/zfs-cleanup-snapshots":
      ensure: present
      mode: "0754"
      content: |
        #!/bin/env bash

        LABEL=${1:-frequent}
        if [ "${LABEL}" == "weekly" ]; then
            MAXAGE=${2:-7257600} # 30 days in seconds
        else
            MAXAGE=${2:-2592000} # 90 days in seconds
        fi

        POOLS="$(zpool list| awk '/ONLINE/{print $1}')"
        for POOL_NAME in ${POOLS}; do
            DATASETS="$(zfs list | awk "/${POOL_NAME}\//{print \$1}")"
            for dataset in ${DATASETS}; do
                for snapshot in $(zfs list -t snapshot "${dataset}"); do
                    created=$(date -d "$(sed -n "s|^"${dataset}"@"${LABEL}"-\(.\{4\}\)\(.\{2\}\)\(.\{2\}\)-\(.\{2\}\)\(.\{2\}\)\(.\{2\}\).*|\1-\2-\3 \4:\5:\6|p" <<<${snapshot})" "+%s")
                    if (( $[$(date '+%s')-${created}] > ${MAXAGE} )); then
                        echo "deleting snapshot '${snapshot}' ..."
                        zfs destroy -r "${snapshot}"
                    fi
                done
            done
        done
    "/etc/systemd/system/zfs-cleanup-snapshots@.service":
      ensure: present
      content: |
        [Unit]
        Description=Cleanup zfs %i snapshots

        [Service]
        Type=oneshot
        ExecStart=/usr/local/bin/zfs-cleanup-snapshots %i
        User=root
        Group=systemd-journal
      require: File[/usr/local/bin/zfs-cleanup-snapshots]
    "/etc/systemd/system/zfs-cleanup-snapshots-daily.timer":
      ensure: present
      content: |
        [Unit]
        Description=Timer for cleaning up daily zfs snapshots

        [Timer]
        OnCalendar=daily
        Persistent=true
        Unit=zfs-cleanup-snapshots@daily.service

        [Install]
        WantedBy=timers.target
      require: File[/etc/systemd/system/zfs-cleanup-snapshots@.service]
    "/etc/systemd/system/zfs-cleanup-snapshots-weekly.timer":
      ensure: present
      content: |
        [Unit]
        Description=Timer for cleaning up weekly zfs snapshots

        [Timer]
        OnCalendar=weekly
        Persistent=true
        Unit=zfs-cleanup-snapshots@weekly.service

        [Install]
        WantedBy=timers.target
      require: File[/etc/systemd/system/zfs-cleanup-snapshots@.service]

    "/usr/local/bin/zfs-scrub-all-pools":
      ensure: present
      mode: "0744"
      content: |
        #!/bin/env bash

        for pool in $(zpool list -H -o name); do sudo zpool scrub ${pool}; done

    "/etc/systemd/system/zfs-scrub-weekly.timer":
      content: |
        [Unit]
        Description=Run zfs scrub weekly

        [Timer]
        OnCalendar=weekly
        Persistent=true
        Unit=zfs-scrub.service

        [Install]
        WantedBy=timers.target
      require:
        - File[/etc/systemd/system/zfs-scrub.service]
    "/etc/systemd/system/zfs-scrub.service":
      ensure: present
      mode: "0644"
      content: |
        [Unit]
        Description=Run a zfs scrub

        [Service]
        Type=oneshot
        ExecStart=/usr/local/bin/zfs-scrub-all-pools
        User=root
        Group=systemd-journal
      require:
        - File[/usr/local/bin/zfs-scrub-all-pools]


  exec:
    "systemctl daemon-reload":
      refreshonly: true
      path:
        - /bin
        - /usr/bin
      subscribe:
        - File[/etc/systemd/system/docker-system-prune-weekly.timer]
        - File[/etc/systemd/system/unattended-reboot-weekly.timer]
        - File[/etc/systemd/system/zfs-snapshots-daily.timer]
        - File[/etc/systemd/system/zfs-snapshots-weekly.timer]
        - File[/etc/systemd/system/zfs-cleanup-snapshots-daily.timer]
        - File[/etc/systemd/system/zfs-cleanup-snapshots-weekly.timer]
        - File[/etc/systemd/system/zfs-scrub-weekly.timer]
    "/usr/sbin/locale-gen":
      refreshonly: true


  service:
    "docker-system-prune-weekly.timer":
      ensure: running
      enable: true
      require: Exec[systemctl daemon-reload]
    "unattended-reboot-weekly.timer":
      ensure: running
      enable: true
      require: Exec[systemctl daemon-reload]
    "zfs-snapshots-daily.timer":
      ensure: running
      enable: true
      require: Exec[systemctl daemon-reload]
    "zfs-snapshots-weekly.timer":
      ensure: running
      enable: true
      require: Exec[systemctl daemon-reload]
    "zfs-cleanup-snapshots-daily.timer":
      ensure: running
      enable: true
      require: Exec[systemctl daemon-reload]
    "zfs-cleanup-snapshots-weekly.timer":
      ensure: running
      enable: true
      require: Exec[systemctl daemon-reload]
    "zfs-scrub-weekly.timer":
      ensure: running
      enable: true
      require: Exec[systemctl daemon-reload]

docker::docker_users:
  - marco

docker::run_instance::instance:
  nodexporter:
    image: quay.io/prometheus/node-exporter:latest
    command: >
      --path.rootfs=/host
    dns:
      - 10.1.1.52
      - 10.1.1.53
    extra_parameters:
      - --restart=unless-stopped
      - --pid="host"
    expose:
      - 9100/tcp
    net:
      - host
    pull_on_start: true
    require:
      - Class[docker]
    volumes:
      - /:/host:ro,rslave

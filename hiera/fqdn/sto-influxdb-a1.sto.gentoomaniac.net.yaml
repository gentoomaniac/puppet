---
classes:
  - netplan
  - docker
  - docker::networks
  - docker::run_instance

ressources:
  file:
    "/srv":
      ensure: directory
    "/srv/traefik":
      ensure: directory
      require: File[/srv]
    "/srv/traefik/conf":
      ensure: directory
      require: File[/srv/traefik]
    "/srv/traefik/ssl":
      ensure: directory
      require: File[/srv/traefik]
    "/srv/traefik/ssl/key.pem":
      ensure: present
      content: "%{lookup('secret_srv_gentoomaniac_net_key')}"
      require: File[/srv/traefik/ssl]
    "/srv/traefik/ssl/cert.pem":
      ensure: present
      content: "%{lookup('secret_srv_gentoomaniac_net_cert')}"
      require: File[/srv/traefik/ssl]
    "/srv/traefik/conf/certs.toml":
      ensure: present
      content: |
        [tls.stores]
          [tls.stores.default]
          [tls.stores.default.defaultCertificate]
            certFile = "/ssl/cert.pem"
            keyFile = "/ssl/key.pem"
      require:
        - File[/srv/traefik/ssl/cert.pem]
        - File[/srv/traefik/ssl/key.pem]
    "/srv/influxdb":
      ensure: directory
      require: File[/srv]
    "/srv/telegraf":
      ensure: directory
      require: File[/srv]
    "/srv/telegraf/telegraf.conf":
      ensure: present
      content: |
        # Configuration for telegraf agent
        [agent]
          ## Default data collection interval for all inputs
          interval = "10s"
          ## Rounds collection interval to 'interval'
          ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
          round_interval = true

          ## Telegraf will send metrics to outputs in batches of at most
          ## metric_batch_size metrics.
          ## This controls the size of writes that Telegraf sends to output plugins.
          metric_batch_size = 1000

          ## For failed writes, telegraf will cache metric_buffer_limit metrics for each
          ## output, and will flush this buffer on a successful write. Oldest metrics
          ## are dropped first when this buffer fills.
          ## This buffer only fills when writes fail to output plugin(s).
          metric_buffer_limit = 10000

          ## Collection jitter is used to jitter the collection by a random amount.
          ## Each plugin will sleep for a random time within jitter before collecting.
          ## This can be used to avoid many plugins querying things like sysfs at the
          ## same time, which can have a measurable effect on the system.
          collection_jitter = "0s"

          ## Default flushing interval for all outputs. Maximum flush_interval will be
          ## flush_interval + flush_jitter
          flush_interval = "10s"
          ## Jitter the flush interval by a random amount. This is primarily to avoid
          ## large write spikes for users running a large number of telegraf instances.
          ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
          flush_jitter = "0s"

          ## By default or when set to "0s", precision will be set to the same
          ## timestamp order as the collection interval, with the maximum being 1s.
          ##   ie, when interval = "10s", precision will be "1s"
          ##       when interval = "250ms", precision will be "1ms"
          ## Precision will NOT be used for service inputs. It is up to each individual
          ## service input to set the timestamp at the appropriate precision.
          ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
          precision = ""

          ## Logging configuration:
          ## Run telegraf with debug log messages.
          debug = false
          ## Run telegraf in quiet mode (error log messages only).
          quiet = false
          ## Specify the log file name. The empty string means to log to stderr.
          logfile = ""

          ## Override default hostname, if empty use os.Hostname()
          hostname = ""
          ## If set to true, do no set the "host" tag in the telegraf agent.
          omit_hostname = false

          # Configuration for sending metrics to InfluxDB
          [[outputs.influxdb]]
            ## The full HTTP or UDP URL for your InfluxDB instance.
            ##
            urls = ["https://influxdb.srv.gentoomaniac.net:8086"]

            ## The target database for metrics; will be created as needed.
            ## For UDP url endpoint database needs to be configured on server side.
            database = "telegraf"

            ## Timeout for HTTP messages.
            timeout = "5s"

            ## HTTP Basic Auth
            username = "%{lookup('secret_telegraf_user')}"
            password = "%{lookup('secret_telegraf_password')}"
        [[inputs.cpu]]
          ## Whether to report per-cpu stats or not
          percpu = true
          ## Whether to report total system cpu stats or not
          totalcpu = true
          ## If true, collect raw CPU time metrics.
          collect_cpu_time = false
          ## If true, compute and report the sum of all non-idle CPU states.
          report_active = false
        [[inputs.disk]]
          ## By default stats will be gathered for all mount points.
          ## Set mount_points will restrict the stats to only the specified mount points.
          # mount_points = ["/"]
          ## Ignore mount points by filesystem type.
          ignore_fs = ["tmpfs", "devtmpfs", "devfs", "overlay", "aufs", "squashfs"]
        [[inputs.diskio]]
        [[inputs.mem]]
        [[inputs.net]]
        [[inputs.processes]]
        [[inputs.swap]]
        [[inputs.system]]
      require:
        - File[/srv/telegraf]
    "/srv/chronograf":
      ensure: directory
      require: File[/srv]

docker::docker_users:
  - marco

docker::networks::networks:
  web:
    ensure: "present"

docker::run_instance::instance:
  influxdb:
    image: influxdb:1.7-alpine
    dns:
      - 10.1.1.52
      - 10.1.1.53
    env:
      - INFLUXDB_DB=metrics
      - INFLUXDB_ADMIN_USER=%{lookup('secret_influxdb_admin_user')}
      - INFLUXDB_ADMIN_PASSWORD=%{lookup('secret_influxdb_admin_password')}
      - INFLUXDB_HTTP_AUTH_ENABLED=TRUE
      - INFLUXDB_USER=%{lookup('secret_influxdb_user')}
      - INFLUXDB_USER_PASSWORD=%{lookup('secret_influxdb_user_password')}
    expose:
      - 8086/tcp
    extra_parameters:
      - --restart=unless-stopped
    labels:
      - "'traefik.enable=true'"
      - "'traefik.http.routers.influxdb.rule=Host(`influxdb.srv.gentoomaniac.net`)'"
      - "'traefik.http.routers.influxdb.entrypoints=influxdb'"
      - "'traefik.http.routers.influxdb.tls=true'"
      - "'traefik.http.middlewares.influxdb-whitelist.ipwhitelist.sourcerange=10.1.1.0/24,10.1.15.0/24,172.17.0.0/24'"
      - "'traefik.http.routers.influxdb.middlewares=influxdb-whitelist'"
    pull_on_start: true
    volumes:
      - /srv/influxdb:/var/lib/influxdb
    require:
      - Class[docker]
      - File[/srv/influxdb]
  telegraf:
    image: telegraf:1.15-alpine
    dns:
      - 10.1.1.52
      - 10.1.1.53
    env:
      - HOST_ETC=/hostfs/etc
      - HOST_PROC=/hostfs/proc
      - HOST_SYS=/hostfs/sys
      - HOST_VAR=/hostfs/var
      - HOST_RUN=/hostfs/run
      - HOST_MOUNT_PREFIX=/hostfs
    extra_parameters:
      - --restart=unless-stopped
    pull_on_start: true
    volumes:
      - /:/hostfs:ro
      - /srv/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    require:
      - Class[docker]
      - File[/srv/telegraf]
      - File[/srv/telegraf/telegraf.conf]
  chronograf:
    image: chronograf:1.7-alpine
    dns:
      - 10.1.1.52
      - 10.1.1.53
    expose:
      - 8888/tcp
    extra_parameters:
      - --restart=unless-stopped
    labels:
      - "'traefik.enable=true'"
      - "'traefik.http.routers.chronograf.rule=Host(`chronograf.srv.gentoomaniac.net`)'"
      - "'traefik.http.routers.chronograf.entrypoints=ssl'"
      - "'traefik.http.routers.chronograf.tls=true'"
      - "'traefik.http.middlewares.chronograf-whitelist.ipwhitelist.sourcerange=10.1.1.0/24,10.1.15.0/24,172.17.0.0/24'"
      - "'traefik.http.routers.chronograf.middlewares=chronograf-whitelist'"
    pull_on_start: true
    volumes:
      - /srv/chronograf:/var/lib/chronograf
    require:
      - Class[docker]
      - File[/srv/chronograf]
  traefik:
    image: traefik:v2.2
    command: >
      --api.insecure=true
      --entrypoints.influxdb.address=:8086
      --entrypoints.ssl.address=:443
      --serverstransport.insecureskipverify=true
      --providers.docker
      --providers.docker.exposedbydefault=false
      --providers.file.directory=/conf
      --providers.file.watch=true
    dns:
      - 10.1.1.52
      - 10.1.1.53
    env:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
    extra_parameters:
      - --restart=unless-stopped
    net:
      - web
    ports:
      - 8086:8086/tcp
      - 8080:8080/tcp
      - 443:443/tcp
    pull_on_start: true
    require:
      - Class[docker]
      - Docker_network[web]
      - File[/srv/traefik/conf/certs.toml]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /srv/traefik/ssl:/ssl:ro
      - /srv/traefik/conf:/conf:ro

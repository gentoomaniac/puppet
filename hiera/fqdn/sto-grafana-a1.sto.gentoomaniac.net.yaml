---
classes:
  - docker::networks
  - docker::run_instance

ressources:
  zfs:
    "datapool/grafana":
      ensure: present
    "datapool/tempo":
      ensure: present
    "datapool/traefik":
      ensure: present
  file:
    "/srv/traefik/conf":
      ensure: directory
      require: Zfs[datapool/traefik]
    "/srv/traefik/ssl":
      ensure: directory
      require: Zfs[datapool/traefik]
    "/srv/traefik/ssl/key.pem":
      ensure: present
      content: "%{lookup('secret_srv_gentoomaniac_net_key')}"
      require: File[/srv/traefik/ssl]
      notify: Docker::Run[traefik]
    "/srv/traefik/ssl/cert.pem":
      ensure: present
      content: "%{lookup('secret_srv_gentoomaniac_net_cert')}"
      require: File[/srv/traefik/ssl]
      notify: Docker::Run[traefik]
    "/srv/traefik/conf/certs.toml":
      ensure: present
      content: |
        [tls.stores]
          [tls.stores.default]
          [tls.stores.default.defaultCertificate]
            certFile = "/ssl/cert.pem"
            keyFile = "/ssl/key.pem"
      require:
        - File[/srv/traefik/ssl/cert.pem]
        - File[/srv/traefik/ssl/key.pem]
    "/srv/tempo/data":
      ensure: directory
      require: Zfs[datapool/tempo]
    "/srv/temp/tempo.yaml":
      ensure: present
      content: |
        stream_over_http_enabled: true
        server:
          http_listen_port: 3200
          log_level: info

        query_frontend:
          search:
            duration_slo: 5s
            throughput_bytes_slo: 1.073741824e+09
          trace_by_id:
            duration_slo: 5s

        distributor:
          receivers:                           # this configuration will listen on all ports and protocols that tempo is capable of.
            otlp:
              protocols:
                http:
                grpc:

        ingester:
          max_block_duration: 5m               # cut the headblock when this much time passes. this is being set for demo purposes and should probably be left alone normally

        compactor:
          compaction:
            block_retention: 1h                # overall Tempo trace retention. set for demo purposes

        metrics_generator:
          registry:
            external_labels:
              source: tempo
              cluster: docker-compose
          storage:
            path: /var/tempo/generator/wal
            remote_write:
              - url: http://prometheus:9090/api/v1/write
                send_exemplars: true
          traces_storage:
            path: /var/tempo/generator/traces

        storage:
          trace:
            backend: local                     # backend configuration to use
            wal:
              path: /var/tempo/wal             # where to store the wal locally
            local:
              path: /var/tempo/blocks

        overrides:
          defaults:
            metrics_generator:
              processors: [service-graphs, span-metrics, local-blocks] # enables metrics generator
              generate_native_histograms: both
      require: Zfs[datapool/tempo]

docker::networks::networks:
  web:
    ensure: "present"

docker::run_instance::instance:
  traefik:
    image: traefik:v3.1
    command: >
      --api.insecure=true
      --api.dashboard=true
      --entrypoints.influxdb.address=:8086
      --entrypoints.ssl.address=:443
      --serverstransport.insecureskipverify=true
      --providers.docker
      --providers.docker.exposedbydefault=false
      --providers.file.directory=/conf
      --providers.file.watch=true
    dns:
      - 10.1.1.53
    env:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
    extra_parameters:
      - --restart=unless-stopped
    net:
      - web
    ports:
      - 8086:8086/tcp
      - 8080:8080/tcp
      - 443:443/tcp
    pull_on_start: true
    require:
      - Class[docker]
      - Docker_network[web]
      - File[/srv/traefik/conf/certs.toml]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /srv/traefik/ssl:/ssl:ro
      - /srv/traefik/conf:/conf:ro

  tempo:
    image: grafana/tempo:latest
    dns:
      - 10.1.1.53
    labels:
      - traefik.enable=true
      - traefik.http.routers.tempo.rule=Host(`tempo.srv.gentoomaniac.net`)
      - traefik.http.services.tempo.loadbalancer.server.port=3200
      - traefik.http.routers.tempo.entrypoints=tempo
      - traefik.http.routers.tempo.tls=true
      - traefik.http.middlewares.tempo-whitelist.ipwhitelist.sourcerange=10.1.1.0/24,10.1.15.0/24
      - traefik.http.routers.tempo.middlewares=grafana-whitelist
    command:
      - "-config.file=/etc/tempo.yaml"
    volumes:
      - /srv/tempo/tempo.yaml:/etc/tempo.yaml
      - /srv/tempo/data:/var/tempo
    net:
      - web
    expose:
      - 3200
    ports:
      - "4317:4317"  # otlp grpc
      - "4318:4318"  # otlp http
    require:
      - Class[docker]
      - Zfs[datapool/grafana]

  grafana:
    image: grafana/grafana:latest
    dns:
      - 10.1.1.53
    env:
      - GF_SERVER_ROOT_URL=https://grafana.srv.gentoomaniac.net
      # - GF_SECURITY_ADMIN_PASSWORD=
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel,vonage-status-panel,doitintl-bigquery-datasource
      - GF_RENDERING_SERVER_URL=http://renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
      - GF_LOG_FILTERS=rendering:debug
    expose:
      - 3000/tcp
    extra_parameters:
      - --restart=unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.rule=Host(`grafana.srv.gentoomaniac.net`)
      - traefik.http.routers.grafana.entrypoints=ssl
      - traefik.http.routers.grafana.tls=true
      - traefik.http.middlewares.grafana-whitelist.ipwhitelist.sourcerange=10.1.1.0/24,10.1.15.0/24
      - traefik.http.routers.grafana.middlewares=grafana-whitelist
    net:
      - web
    pull_on_start: true
    username: 1000:1000
    volumes:
      - /srv/grafana:/var/lib/grafana
    require:
      - Class[docker]
      - Zfs[datapool/grafana]

  renderer:
    image: grafana/grafana-image-renderer:2.0.0
    env:
      - ENABLE_METRICS=true
    expose:
      - 8081/tcp
    extra_parameters:
      - --restart=unless-stopped
    net:
      - web
    pull_on_start: true
    require:
      - Class[docker]

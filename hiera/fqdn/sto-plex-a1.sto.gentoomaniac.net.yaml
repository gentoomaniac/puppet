---
classes:
  - docker
  - docker::networks
  - docker::volumes
  - docker::run_instance
  - kickstart_nginx
  - certbot

certbot::domain: "*.srv.gentoomaniac.net"

docker::docker_users:
  - marco

ressources:
  package:
    autofs:
      ensure: installed
    "jq":
      ensure: latest
    "curl":
      ensure: latest
  sysctl:
    vm.max_map_count:
      value: 262144
  zfs:
    "localpool/traefik":
      ensure: present
    "localpool/radarr":
      ensure: present
    "localpool/radarr-kids":
      ensure: present
    "localpool/sonarr":
      ensure: present
    "localpool/sonarr-kids":
      ensure: present
    "localpool/lidarr":
      ensure: present
    "localpool/tautulli":
      ensure: present
    "localpool/plex":
      ensure: present
    "localpool/ytdl":
      ensure: present
    "localpool/jellyfin":
      ensure: present
    "localpool/nzbget":
      ensure: present
    "localpool/vault":
      ensure: present
  file:
    "/srv/traefik/conf":
      ensure: directory
      require: Zfs[localpool/traefik]
    "/srv/traefik/ssl":
      ensure: directory
      require: Zfs[localpool/traefik]
    "/srv/traefik/ssl/key.pem":
      ensure: present
      content: "%{lookup('secret_srv_gentoomaniac_net_key')}"
      require: File[/srv/traefik/ssl]
      notify: Docker::Run[traefik]
    "/srv/traefik/ssl/cert.pem":
      ensure: present
      content: "%{lookup('secret_srv_gentoomaniac_net_cert')}"
      require: File[/srv/traefik/ssl]
      notify: Docker::Run[traefik]
    "/srv/traefik/conf/certs.toml":
      ensure: present
      content: |
        [tls.stores]
          [tls.stores.default]
          [tls.stores.default.defaultCertificate]
            certFile = "/ssl/cert.pem"
            keyFile = "/ssl/key.pem"
      require: File[/srv/traefik/conf]
    "/srv/traefik/conf/static.toml":
      ensure: present
      content: |
        [http.services]
          [http.services.dummy.loadBalancer]
            [[http.services.dummy.loadBalancer.servers]]
                url = ""

          [http.services.nas.loadBalancer]
            [[http.services.nas.loadBalancer.servers]]
              url = "https://10.1.1.5:443/"

          [http.services.unifi.loadBalancer]
            [[http.services.unifi.loadBalancer.servers]]
              url = "https://10.1.1.2:8443/"

          [http.services.protect.loadBalancer]
            [[http.services.protect.loadBalancer.servers]]
              url = "https://10.1.1.2:7443/"

          [http.services.ck.loadBalancer]
            [[http.services.ck.loadBalancer.servers]]
              url = "https://10.1.1.2:443/"

          [http.services.proxmox1.loadBalancer]
            [[http.services.proxmox1.loadBalancer.servers]]
              url = "https://sto-proxmox-a1.sto.gentoomaniac.net:8006/"

          [http.services.proxmox2.loadBalancer]
            [[http.services.proxmox2.loadBalancer.servers]]
              url = "https://sto-proxmox-a2.sto.gentoomaniac.net:8006/"

        [http.routers]
          [http.routers.redirect-to-https]
            rule = "hostregexp(`{host:.+}`)"
            service = "dummy"
            entryPoints = ["web"]
            middlewares = ["redirect-to-https"]

          [http.routers.nas]
            rule = "Host(`nas.srv.gentoomaniac.net`)"
            service = "nas"
            entryPoints = ["ssl"]
            middlewares = ["local-only-whitelist", "sso@file"]
            [http.routers.nas.tls]

          [http.routers.unifi]
            rule = "Host(`unifi.srv.gentoomaniac.net`)"
            service = "unifi"
            entryPoints = ["ssl"]
            middlewares = ["local-only-whitelist"]
            [http.routers.unifi.tls]

          [http.routers.protect]
            rule = "Host(`protect.srv.gentoomaniac.net`)"
            service = "protect"
            entryPoints = ["ssl"]
            middlewares = ["local-only-whitelist"]
            [http.routers.protect.tls]

          [http.routers.ck]
            rule = "Host(`ck.srv.gentoomaniac.net`)"
            service = "ck"
            entryPoints = ["ssl"]
            middlewares = ["local-only-whitelist"]
            [http.routers.ck.tls]

          [http.routers.proxmox1]
            rule = "Host(`proxmox1.srv.gentoomaniac.net`)"
            service = "proxmox1"
            entryPoints = ["ssl"]
            middlewares = ["local-only-whitelist", "sso@file"]
            [http.routers.proxmox1.tls]

          [http.routers.proxmox2]
            rule = "Host(`proxmox2.srv.gentoomaniac.net`)"
            service = "proxmox2"
            entryPoints = ["ssl"]
            middlewares = ["local-only-whitelist"]
            [http.routers.proxmox2.tls]

        [http.middlewares]
          [http.middlewares.redirect-to-https]
            [http.middlewares.redirect-to-https.redirectscheme]
              scheme = "https"

          [http.middlewares.local-only-whitelist]
            [http.middlewares.local-only-whitelist.ipwhitelist]
              sourcerange = ["10.1.1.0/24","10.1.15.0/24"]

          [http.middlewares.sso.forwardAuth]
            address = "https://auth.srv.gentoomaniac.net"
            authResponseHeaders = ["X-Forwarded-User"]
    /etc/auto.nfs:
      ensure: present
      content: |
        movies  -soft,intr,rsize=8192,wsize=8192,noatime,uid=marco,gid=marco 10.1.1.5:/mnt/movies/movies
        kids_movies  -soft,intr,rsize=8192,wsize=8192,noatime,uid=marco,gid=marco 10.1.1.5:/mnt/tank0/kids_movies
        shows  -soft,intr,rsize=8192,wsize=8192,noatime,uid=marco,gid=marco 10.1.1.5:/mnt/tank3/shows
        kids_shows  -soft,intr,rsize=8192,wsize=8192,noatime,uid=marco,gid=marco 10.1.1.5:/mnt/tank0/kids_shows
        kids_shows_se  -soft,intr,rsize=8192,wsize=8192,noatime,uid=marco,gid=marco 10.1.1.5:/mnt/tank0/kids_shows_se
        kids_audio  -soft,intr,rsize=8192,wsize=8192,noatime,uid=marco,gid=marco 10.1.1.5:/mnt/tank0/kids_audio
        music  -soft,intr,rsize=8192,wsize=8192,noatime,uid=marco,gid=marco 10.1.1.5:/mnt/tank0/music
        sd_old  -soft,intr,rsize=8192,wsize=8192,noatime,uid=marco,gid=marco 10.1.1.5:/mnt/tank3/sd_old
        youtube-downloader  -soft,intr,rsize=8192,wsize=8192,noatime,uid=marco,gid=marco 10.1.1.5:/mnt/tank0/youtube-downloader

        docker  -rw,soft,intr,rsize=8192,wsize=8192,noatime 10.1.1.5:/mnt/bak/docker
        share  -rw,soft,intr,rsize=8192,wsize=8192,noatime 10.1.1.5:/mnt/tank5/share
        nzbget  -rw,soft,intr,rsize=8192,wsize=8192,noatime 10.1.1.5:/mnt/tmp/nzbget
        tftpboot  -rw,soft,intr,rsize=8192,wsize=8192,noatime 10.1.1.5:/mnt/tank1/tftpboot
      notify: Service[autofs]

    /etc/auto.master.d/nfs.autofs:
      ensure: present
      content: |
        /nfs   /etc/auto.nfs --timeout 60

      require:
        - File[/etc/auto.nfs]
        - Package[autofs]
    /srv/plex/config:
      ensure: directory
      require: Zfs[localpool/plex]
    /srv/plex/transcode:
      ensure: directory
      require: Zfs[localpool/plex]
    "/srv/ytdl/appdata":
      ensure: directory
      require: Zfs[localpool/ytdl]
    "/srv/ytdl/audio":
      ensure: directory
      require: Zfs[localpool/ytdl]
    "/srv/ytdl/video":
      ensure: directory
      require: Zfs[localpool/ytdl]
    "/srv/ytdl/subscriptions":
      ensure: directory
      require: Zfs[localpool/ytdl]
    "/srv/jellyfin/conf":
      ensure: directory
      require: Zfs[localpool/jellyfin]
    "/srv/jellyfin/cache":
      ensure: directory
      require: Zfs[localpool/jellyfin]
    "/srv/nzbget/config":
      ensure: directory
      owner: 1000
      group: 1000
      require: Zfs[localpool/nzbget]
    "/srv/vault/data":
      ensure: directory
      owner: 100
      group: 1000
      mode: "0770"
      require: Zfs[localpool/vault]
    "/srv/vault/conf":
      ensure: directory
      require: Zfs[localpool/vault]
    "/srv/vault/file":
      ensure: directory
      owner: 100
      group: 1000
      require: Zfs[localpool/vault]
    "/srv/vault/logs":
      ensure: directory
      owner: 100
      group: 1000
      require: Zfs[localpool/vault]
    "/srv/vault/conf/config.hcl":
      ensure: present
      content: |
        ui = true

        listener "tcp" {
          address = "0.0.0.0:8200"
          tls_disable = 1
        }

        storage "file" {
          path = "/data"
        }

        default_lease_ttl = "720h"

        telemetry {
          dogstatsd_addr = "172.17.0.1:8125"
          disable_hostname = true
        }
      require: File[/srv/vault/conf]
    "/srv/vault/secret.json":
      ensure: file
      owner: 0
      mode: "0600"
      content: |
        {
          "key": "%{lookup('secret_unseal_token')}"
        }
      require: Zfs[localpool/vault]
    "/etc/systemd/system/vault-unseal.service":
      ensure: present
      mode: "0644"
      content: |
        [Unit]
        Description=unseal vault if sealed

        [Service]
        Type=oneshot
        ExecStart=/bin/bash -c 'if curl https://vault.srv.gentoomaniac.net/v1/sys/health 2>/dev/null | jq .sealed | grep -q true; then curl -X PUT -d @/srv/vault/secret.json https://vault.srv.gentoomaniac.net/v1/sys/unseal; else exit 0; fi'
        User=root
        Group=systemd-journal
      require:
        - File[/srv/vault/secret.json]
        - Package[jq]
    "/etc/systemd/system/vault-unseal.timer":
      ensure: present
      content: |
        [Unit]
        Description=Check sealed state of vault and unseal if necessary

        [Timer]
        OnCalendar=*:0/5
        Persistent=true
        Unit=vault-unseal.service

        [Install]
        WantedBy=timers.target
      require:
        - File[/etc/systemd/system/vault-unseal.service]
    "/etc/clouddns-updater-key.json":
      ensure: present
      mode: "0750"
      content: "%{lookup('secret_cloud_dns')}"
    "/usr/local/bin/clouddns-update":
      ensure: present
      mode: "0750"
      content: |
        #! /bin/env bash

        DNS_NAME="vpn.gentoomaniac.net"
        PROJECT="gentoomaniac-net"
        SERVICE_ACCOUNT_NAME="dns-updates@gentoomaniac-net.iam.gserviceaccount.com"
        ZONE="gentoomaniac-net"
        IMAGE_NAME="google/cloud-sdk:latest"

        OLD_IP="$(dig +short "${DNS_NAME}")"
        CURRENT_IP="$(dig +short myip.opendns.com @resolver1.opendns.com)"

        if [ "${OLD_IP}" != "${CURRENT_IP}" ]; then
            docker pull "${IMAGE_NAME}"
            docker run -it -e GOOGLE_APPLICATION_CREDENTIALS=/key.json -v "clouddns-config:/root/.config" -v "clouddns-kube:/root/.kube" -v /etc/clouddns-updater-key.json:/key.json:ro "${IMAGE_NAME}" gcloud auth activate-service-account "${SERVICE_ACCOUNT_NAME}" --key-file=/key.json --project="${PROJECT}"
            docker run -it -v "clouddns-config:/root/.config" -v "clouddns-kube:/root/.kube" "${IMAGE_NAME}" gcloud dns record-sets update "${DNS_NAME}" --rrdatas="${CURRENT_IP}" --type=A --zone="${ZONE}" --account="${SERVICE_ACCOUNT_NAME}"
        fi
      require:
      - Docker_volume[clouddns-config]
      - Docker_volume[clouddns-kube]

    "/etc/systemd/system/clouddns-updater.timer":
      content: |
        [Unit]
        Description=Update clouddns entries hourly if necessary

        [Timer]
        OnCalendar=hourly
        Persistent=true
        Unit=clouddns-updater.service

        [Install]
        WantedBy=timers.target
      require:
        - File[/etc/systemd/system/clouddns-updater.service]
    "/etc/systemd/system/clouddns-updater.service":
      ensure: present
      mode: "0644"
      content: |
        [Unit]
        Description=update vpn dns alias

        [Service]
        Type=oneshot
        ExecStart=/usr/local/bin/clouddns-update
        User=root
        Group=systemd-journal
      require:
        - File[/etc/clouddns-updater-key.json]
        - File[/usr/local/bin/clouddns-update]

  service:
    autofs:
      ensure: running
      enable: true
      require:
        - File[/etc/auto.nfs]
        - File[/etc/auto.master.d/nfs.autofs]
    avahi-daemon:
      ensure: stopped
      enable: false
    "vault-unseal.timer":
      ensure: running
      enable: true
      require: Exec[systemctl daemon-reload]
    "clouddns-updater.timer":
      ensure: running
      enable: true
      require: Exec[systemctl daemon-reload]

docker::networks::networks:
  web:
    ensure: "present"

docker::volumes::volumes:
  nfs_movies:
    ensure: present
    driver: local
    options:
      - - type=nfs
        - o=addr=10.1.1.5,nolock,soft,bg,tcp,intr,rsize=8192,wsize=8192,noatime,rw
        - device=:/mnt/movies/movies
  nfs_kids_movies:
    ensure: present
    driver: local
    options:
      - - type=nfs
        - o=addr=10.1.1.5,nolock,soft,bg,tcp,intr,rsize=8192,wsize=8192,noatime,rw
        - device=:/mnt/tank0/kids_movies
  nfs_shows:
    ensure: present
    driver: local
    options:
      - - type=nfs
        - o=addr=10.1.1.5,nolock,soft,bg,tcp,intr,rsize=8192,wsize=8192,noatime,rw
        - device=:/mnt/tank3/shows
  nfs_kids_shows:
    ensure: present
    driver: local
    options:
      - - type=nfs
        - o=addr=10.1.1.5,nolock,soft,bg,tcp,intr,rsize=8192,wsize=8192,noatime,rw
        - device=:/mnt/tank0/kids_shows
  nfs_kids_shows_se:
    ensure: present
    driver: local
    options:
      - - type=nfs
        - o=addr=10.1.1.5,nolock,soft,bg,tcp,intr,rsize=8192,wsize=8192,noatime,rw
        - device=:/mnt/tank0/kids_shows_se
  nfs_sd_old:
    ensure: present
    driver: local
    options:
      - - type=nfs
        - o=addr=10.1.1.5,nolock,soft,bg,tcp,intr,rsize=8192,wsize=8192,noatime,rw
        - device=:/mnt/tank3/sd_old
  nfs_youtube_downloader:
    ensure: present
    driver: local
    options:
      - - type=nfs
        - o=addr=10.1.1.5,nolock,soft,bg,tcp,intr,rsize=8192,wsize=8192,noatime,rw
        - device=:/mnt/tank0/youtube-downloader
  nfs_music:
    ensure: present
    driver: local
    options:
      - - type=nfs
        - o=addr=10.1.1.5,nolock,soft,bg,tcp,intr,rsize=8192,wsize=8192,noatime,rw
        - device=:/mnt/tank0/music
  nfs_nzbget:
    ensure: present
    driver: local
    options:
      - - type=nfs
        - o=addr=10.1.1.5,nolock,soft,bg,tcp,intr,rsize=131072,wsize=131072,noatime,rw
        - device=:/mnt/tmp/nzbget

docker::run_instance::instance:
  traefik:
    image: traefik:v2.2
    command: >
      --api.insecure=true
      --entrypoints.web.address=:80
      --entrypoints.websecure.address=:443
      --providers.file.directory=/conf
      --providers.file.watch=true
      --providers.docker
      --providers.docker.exposedbydefault=false
      --serverstransport.insecureskipverify=true
    dns:
      - 10.1.1.52
      - 10.1.1.53
    env:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
    extra_parameters:
      - --restart=unless-stopped
    net:
      - web
    ports:
      - 80:80/tcp
      - 443:443/tcp
      - 8080:8080/tcp
      - 9200:9200/tcp
    pull_on_start: true
    require:
      - Class[docker]
      - Docker_network[web]
      - File[/srv/traefik/conf/certs.toml]
      - File[/srv/traefik/conf/static.toml]
      - File[/srv/traefik/ssl/cert.pem]
      - File[/srv/traefik/ssl/key.pem]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /srv/traefik/ssl:/ssl:ro
      - /srv/traefik/conf:/conf:ro
  radarr:
    image: linuxserver/radarr:latest
    dns:
      - 10.1.1.52
      - 10.1.1.53
    env:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
      - UMASK_SET=022
    expose:
      - 7878/tcp
    extra_parameters:
      - --restart=unless-stopped
    labels:
      - "'traefik.enable=true'"
      - "'traefik.http.routers.radarr.rule=Host(`radarr.srv.gentoomaniac.net`)'"
      - "'traefik.http.routers.radarr.entrypoints=websecure'"
      - "'traefik.http.routers.radarr.tls=true'"
      - "'traefik.http.middlewares.radarr-whitelist.ipwhitelist.sourcerange=10.1.1.0/24,10.1.15.0/24'"
      - "'traefik.http.routers.radarr.middlewares=radarr-whitelist'"
    net:
      - web
    pull_on_start: true
    volumes:
      - /srv/radarr:/config
      - nfs_movies:/movies
    require:
      - Class[docker]
      - Zfs[localpool/radarr]
      - Docker_volume[nfs_movies]
  radarr-kids:
    image: linuxserver/radarr:latest
    dns:
      - 10.1.1.52
      - 10.1.1.53
    env:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
      - UMASK_SET=022
    expose:
      - 7878/tcp
    extra_parameters:
      - --restart=unless-stopped
    labels:
      - "'traefik.enable=true'"
      - "'traefik.http.routers.radarr-kids.rule=Host(`radarr-kids.srv.gentoomaniac.net`)'"
      - "'traefik.http.routers.radarr-kids.entrypoints=websecure'"
      - "'traefik.http.routers.radarr-kids.tls=true'"
      - "'traefik.http.middlewares.radarr-kids-whitelist.ipwhitelist.sourcerange=10.1.1.0/24,10.1.15.0/24'"
      - "'traefik.http.routers.radarr-kids.middlewares=radarr-kids-whitelist'"
    net:
      - web
    pull_on_start: true
    volumes:
      - /srv/radarr-kids:/config
      - nfs_kids_movies:/kids_movies
    require:
      - Class[docker]
      - Zfs[localpool/radarr-kids]
      - Docker_volume[nfs_kids_movies]
  sonarr:
    image: linuxserver/sonarr:latest
    dns:
      - 10.1.1.52
      - 10.1.1.53
    env:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
      - UMASK_SET=022
    expose:
      - 8989/tcp
    extra_parameters:
      - --restart=unless-stopped
    labels:
      - "'traefik.enable=true'"
      - "'traefik.http.routers.sonarr.rule=Host(`sonarr.srv.gentoomaniac.net`)'"
      - "'traefik.http.routers.sonarr.entrypoints=websecure'"
      - "'traefik.http.routers.sonarr.tls=true'"
      - "'traefik.http.middlewares.sonarr-whitelist.ipwhitelist.sourcerange=10.1.1.0/24,10.1.15.0/24'"
      - "'traefik.http.routers.sonarr.middlewares=sonarr-whitelist'"
    net:
      - web
    pull_on_start: true
    volumes:
      - /srv/sonarr:/config
      - nfs_shows:/shows
    require:
      - Class[docker]
      - Zfs[localpool/sonarr]
      - Docker_volume[nfs_shows]
  sonarr-kids:
    image: linuxserver/sonarr:latest
    dns:
      - 10.1.1.52
      - 10.1.1.53
    env:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
      - UMASK_SET=022
    expose:
      - 8989/tcp
    extra_parameters:
      - --restart=unless-stopped
    labels:
      - "'traefik.enable=true'"
      - "'traefik.http.routers.sonarr-kids.rule=Host(`sonarr-kids.srv.gentoomaniac.net`)'"
      - "'traefik.http.routers.sonarr-kids.entrypoints=websecure'"
      - "'traefik.http.routers.sonarr-kids.tls=true'"
      - "'traefik.http.middlewares.sonarr-kids-whitelist.ipwhitelist.sourcerange=10.1.1.0/24,10.1.15.0/24'"
      - "'traefik.http.routers.sonarr-kids.middlewares=sonarr-kids-whitelist'"
    net:
      - web
    pull_on_start: true
    volumes:
      - /srv/sonarr-kids:/config
      - nfs_kids_shows:/shows
    require:
      - Class[docker]
      - Zfs[localpool/sonarr-kids]
      - Docker_volume[nfs_kids_shows]
  lidarr:
    image: linuxserver/lidarr:latest
    dns:
      - 10.1.1.52
      - 10.1.1.53
    env:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
      - UMASK_SET=022
    expose:
      - 8686/tcp
    extra_parameters:
      - --restart=unless-stopped
    labels:
      - "'traefik.enable=true'"
      - "'traefik.http.routers.lidarr.rule=Host(`lidarr.srv.gentoomaniac.net`)'"
      - "'traefik.http.routers.lidarr.entrypoints=websecure'"
      - "'traefik.http.routers.lidarr.tls=true'"
      - "'traefik.http.middlewares.lidarr-whitelist.ipwhitelist.sourcerange=10.1.1.0/24,10.1.15.0/24'"
      - "'traefik.http.routers.lidarr.middlewares=lidarr-whitelist'"
    net:
      - web
    pull_on_start: true
    volumes:
      - /srv/lidarr:/config
      - nfs_music:/music
    require:
      - Class[docker]
      - Zfs[localpool/lidarr]
      - Docker_volume[nfs_music]
  tautulli:
    image: linuxserver/tautulli:latest
    dns:
      - 10.1.1.52
      - 10.1.1.53
    expose:
      - 8181/tcp
    extra_parameters:
      - --restart=unless-stopped
    labels:
      - "'traefik.enable=true'"
      - "'traefik.http.routers.tautulli.rule=Host(`tautulli.srv.gentoomaniac.net`)'"
      - "'traefik.http.routers.tautulli.entrypoints=websecure'"
      - "'traefik.http.routers.tautulli.tls=true'"
      - "'traefik.http.middlewares.tautulli-whitelist.ipwhitelist.sourcerange=10.1.1.0/24,10.1.15.0/24'"
      - "'traefik.http.routers.tautulli.middlewares=tautulli-whitelist'"
    net:
      - web
    pull_on_start: true
    volumes:
      - /srv/tautulli:/config
    require:
      - Class[docker]
      - Zfs[localpool/tautulli]
  plex:
    image: plexinc/pms-docker:latest
    dns:
      - 10.1.1.52
      - 10.1.1.53
    env:
      - PLEX_CLAIM="claim-McptpawppqGxrrc82qqd"
      - TZ="Europe/Berlin"
      - PLEX_GID=44
    labels:
      - "'traefik.enable=false'"
    ports:
      - 32400:32400/tcp
      - 1900:1900/udp
      - 3005:3005/tcp
      #- 5353:5353/udp
      - 8324:8324/tcp
      - 32410:32410/tcp
      - 32412-32414:32412-32414/udp
      - 32469:32469/tcp
    extra_parameters:
      - --restart=unless-stopped
    pull_on_start: true
    volumes:
      - /srv/plex/config:/config
      - /srv/plex/transcode:/transcode
      - nfs_movies:/data/movies:ro
      - nfs_shows:/data/shows:ro
      - nfs_kids_movies:/data/kids_movies:ro
      - nfs_kids_shows:/data/kids_shows:ro
      - nfs_kids_shows_se:/data/kids_shows_se:ro
      - nfs_sd_old:/data/sd_old:ro
      - nfs_music:/data/music:ro
      - nfs_youtube_downloader:/data/youtube:ro
    require:
      - Class[docker]
      - File[/srv/plex/config]
      - File[/srv/plex/transcode]
      - Docker_volume[nfs_movies]
      - Docker_volume[nfs_shows]
      - Docker_volume[nfs_kids_movies]
      - Docker_volume[nfs_kids_shows]
      - Docker_volume[nfs_kids_shows_se]
      - Docker_volume[nfs_sd_old]
      - Docker_volume[nfs_music]
      - Docker_volume[nfs_youtube_downloader]
      - Service[avahi-daemon]
  youtube-dl:
    image: tzahi12345/youtubedl-material:latest
    dns:
      - 10.1.1.52
      - 10.1.1.53
    env:
      - ALLOW_CONFIG_MUTATIONS: 'true'
    labels:
      - "'traefik.enable=true'"
      - "'traefik.http.routers.ytdl.rule=Host(`youtube-dl.srv.gentoomaniac.net`)'"
      - "'traefik.http.routers.ytdl.entrypoints=websecure'"
      - "'traefik.http.routers.ytdl.tls=true'"
      - "'traefik.http.middlewares.ytdl-whitelist.ipwhitelist.sourcerange=10.1.1.0/24,10.1.15.0/24'"
      - "'traefik.http.routers.ytdl.middlewares=ytdl-whitelist'"
    expose:
      - 17442/tcp
    extra_parameters:
      - --restart=unless-stopped
    net:
      - web
    pull_on_start: true
    volumes:
      - /srv/ytdl/appdata:/app/appdata
      - /srv/ytdl/audio:/app/audio
      - /srv/ytdl/video:/app/video
      - /srv/ytdl/subscriptions:/app/subscriptions
      - nfs_youtube_downloader:/app/users
    require:
      - Class[docker]
      - File[/srv/ytdl/appdata]
      - File[/srv/ytdl/audio]
      - File[/srv/ytdl/video]
      - File[/srv/ytdl/subscriptions]
      - Docker_volume[nfs_youtube_downloader]

  jellyfin:
    image: jellyfin/jellyfin:latest
    dns:
      - 10.1.1.52
      - 10.1.1.53
    env:
      - TZ="Europe/Berlin"
    labels:
      - "'traefik.enable=true'"
      - "'traefik.http.routers.jellyfin.rule=Host(`jellyfin.srv.gentoomaniac.net`)'"
      - "'traefik.http.routers.jellyfin.entrypoints=websecure'"
      - "'traefik.http.routers.jellyfin.tls=true'"
      - "'traefik.http.middlewares.jellyfin-whitelist.ipwhitelist.sourcerange=10.1.1.0/24,10.1.15.0/24'"
      - "'traefik.http.routers.jellyfin.middlewares=jellyfin-whitelist'"
    net:
      - web
    expose:
      - 8096/tcp
    extra_parameters:
      - --restart=unless-stopped
      - --device /dev/dri:/dev/dri
    pull_on_start: true
    volumes:
      - /srv/jellyfin/conf:/config
      - /srv/jellyfin/cache:/cache
      - nfs_movies:/data/movies:ro
      - nfs_shows:/data/shows:ro
      - nfs_kids_movies:/data/kids_movies:ro
      - nfs_kids_shows:/data/kids_shows:ro
      - nfs_kids_shows_se:/data/kids_shows_se:ro
      - nfs_sd_old:/data/sd_old:ro
      - nfs_music:/data/music:ro
    require:
      - Class[docker]
      - File[/srv/jellyfin/conf]
      - File[/srv/jellyfin/cache]
      - Docker_volume[nfs_movies]
      - Docker_volume[nfs_shows]
      - Docker_volume[nfs_kids_movies]
      - Docker_volume[nfs_kids_shows]
      - Docker_volume[nfs_kids_shows_se]
      - Docker_volume[nfs_sd_old]
      - Docker_volume[nfs_music]
      - Service[avahi-daemon]
  nzbget:
    image: linuxserver/nzbget:latest
    dns:
      - 10.1.1.52
      - 10.1.1.53
    env:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
    expose:
      - 6789/tcp
    extra_parameters:
      - --restart=unless-stopped
    labels:
      - "'traefik.enable=true'"
      - "'traefik.http.routers.nzbget.rule=Host(`nzbget.srv.gentoomaniac.net`)'"
      - "'traefik.http.routers.nzbget.entrypoints=websecure'"
      - "'traefik.http.routers.nzbget.tls=true'"
      - "'traefik.http.middlewares.nzbget-whitelist.ipwhitelist.sourcerange=10.1.1.0/24,10.1.15.0/24'"
      - "'traefik.http.routers.nzbget.middlewares=nzbget-whitelist'"
    net:
      - web
    pull_on_start: true
    volumes:
      - /srv/nzbget/config:/config
      - nfs_nzbget:/downloads
      - nfs_movies:/movies
      - nfs_shows:/shows
      - nfs_kids_movies:/kids_movies
      - nfs_kids_shows:/kids_shows
      - nfs_music:/music
    require:
      - Class[docker]
      - Docker_volume[nfs_movies]
      - Docker_volume[nfs_shows]
      - Docker_volume[nfs_kids_movies]
      - Docker_volume[nfs_kids_shows]
      - Docker_volume[nfs_nzbget]
      - Docker_volume[nfs_music]
      - File[/srv/nzbget/config]
  vault:
    image: vault:latest
    command: >
      vault server
      -config /vault/config/config.hcl
    dns:
      - 10.1.1.52
      - 10.1.1.53
    expose:
      - 8200/tcp
    extra_parameters:
      - --restart=unless-stopped
      - --cap-add=IPC_LOCK
    labels:
      - "'traefik.enable=true'"
      - "'traefik.http.routers.vault.rule=Host(`vault.srv.gentoomaniac.net`)'"
      - "'traefik.http.routers.vault.entrypoints=websecure'"
      - "'traefik.http.routers.vault.tls=true'"
      - "'traefik.http.middlewares.vault-whitelist.ipwhitelist.sourcerange=10.1.1.0/24,10.1.15.0/24'"
      - "'traefik.http.routers.vault.middlewares=vault-whitelist'"
    net:
      - web
    pull_on_start: true
    require:
      - Class[docker]
      - Docker_network[web]
      - File[/srv/vault/conf/config.hcl]
      - File[/srv/vault/data]
      - File[/srv/vault/file]
      - File[/srv/vault/logs]
    volumes:
      - /srv/vault/conf:/vault/config
      - /srv/vault/data:/data
      - /srv/vault/logs:/vault/logs
      - /srv/vault/file:/vault/file
